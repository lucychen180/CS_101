class ConvNet(nn.Module):

    def __init__(self):
        super(ConvNet, self).__init__()
        
        self.dense = nn.Sequential(
#             nn.Dropout(p=.1),
            nn.Linear(INPUT_SIZE, 56*56),
            nn.ReLU(),
        )

        self.conv = nn.Sequential(
            nn.Conv2d(in_channels=1, out_channels=1, kernel_size=3),
            nn.BatchNorm2d(num_features=1),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=2, padding=1),
        )
        
        self.loss = nn.MSELoss()

    def forward(self, x):
        """
        x : shape(batch, 1030, 2)
        
        out : shape(batch, 28, 28)
        """
        x = x.flatten(start_dim=1)
        x = self.dense(x)
        
        x = x.view(-1,1,56,56)
        x = self.conv(x)
        x = x.squeeze(dim=1)
        
        return x